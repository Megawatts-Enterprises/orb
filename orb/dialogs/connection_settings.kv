#:import dp kivy.metrics.dp
#:import pref orb.misc.utils.pref
#:import Window kivy.core.window.Window
#:import Clipboard kivy.core.clipboard.Clipboard
#:import Factory kivy.factory.Factory

<Tab>

<TypeSpinnerOption@SpinnerOption>:
    size_hint: None, None
    size: dp(150), dp(25)


<ConnectionSettings>:
    title: 'LND Node Connection Settings'
    # size: min(dp(800), Window.size[0]), min(dp(500), Window.size[1])
    background_color: .6, .6, .8, .9
    overlay_color: 0, 0, 0, 0
    size_hint: [.8, .8]
    MDTabs:
        id: tabs
        on_tab_switch: root.on_tab_switch(*args)
        Tab:
            title: 'Type & Address'
            BoxLayout:
                orientation: 'vertical'
                MDLabel:
                    text: 'Specify the type of node. Set as default, or Umbrel.'
                    size_hint_y: 1
                    multiline: True
                Spinner:
                    id: spinner_in_id
                    option_cls: Factory.get("TypeSpinnerOption")
                    text: pref('lnd.type')
                    height: dp(30)
                    width: dp(150)
                    size_hint: None, None
                    on_text: root.set_and_save('lnd.type', spinner_in_id.text)
                MDLabel:
                    text: 'Enter the IP address or hostname of your LND node.'
                    size_hint_y: 1
                    multiline: True
                BoxLayout:
                    orientation: 'horizontal'
                    height: dp(60)
                    size_hint_y: None
                    MDTextField:
                        id: address
                        text: pref('lnd.hostname')
                        helper_text: 'Host Address'
                        helper_text_mode: "persistent"
                        height: dp(60)
                        width: dp(200)
                        size_hint: (None, None)
                    MDRaisedButton:
                        text: 'Save'
                        on_release: root.set_and_save('lnd.hostname', address.text)
                        size_hint_x: None
                        width: dp(100)
                        height: dp(40)
                        md_bg_color: 0.3,0.3,0.3,1
                MDLabel:
                    text: 'Once save, you can proceed onto the next tab.'
                    size_hint_y: 1
        Tab:
            title: 'Protocol'
            BoxLayout:
                orientation: 'vertical'
                size_hint: (1, 1)
                MDLabel:
                    text: 'Enter the protocol for your LND node. If you are on a desktop, you man use GRPC. On mobile, you must select REST.'
                    size_hint_y: 1
                    multiline: True
                BoxLayout:
                    orientation: 'horizontal'
                    BoxLayout:
                        orientation: 'vertical'
                        MDSwitch:
                            id: rest
                            on_release: root.save_protocol('rest')
                            active: pref('lnd.protocol') == 'rest'
                        MDLabel:
                            text: 'REST'
                    BoxLayout:
                        orientation: 'vertical'
                        MDSwitch:
                            id: grpc
                            on_release: root.save_protocol('grpc')
                            active: pref('lnd.protocol') == 'grpc'
                        MDLabel:
                            text: 'GRPC'
                    BoxLayout:
                        orientation: 'vertical'
                        MDSwitch:
                            id: mock
                            on_release: root.save_protocol('mock')
                            active: pref('lnd.protocol') == 'mock'
                        MDLabel:
                            text: 'MOCK'
                MDLabel:
                    text: 'Once entered, you can proceed onto the next tab.'
                    size_hint_y: 1
        Tab:
            title: 'Port'
            BoxLayout:
                orientation: 'vertical'
                MDLabel:
                    text: 'Enter the port # to connect your LND node. This is typically 8080 for REST, and 10009 for GRPC.'
                    size_hint_y: 0.1
                    multiline: True
                BoxLayout:
                    orientation: 'vertical'
                    size_hint_y: 0.8
                    MDTextField:
                        id: rest_port
                        text: str(int(pref('lnd.rest_port')))
                        helper_text: 'REST Port #'
                        helper_text_mode: "persistent"
                        height: dp(60)
                        width: dp(200)
                        size_hint: (None, None)
                    MDTextField:
                        id: grpc_port
                        text: str(int(pref('lnd.grpc_port')))
                        helper_text: 'GRPC Port #'
                        helper_text_mode: "persistent"
                        height: dp(60)
                        width: dp(200)
                        size_hint: (None, None)
                    MDRaisedButton:
                        text: 'Save'
                        on_release: (root.set_and_save('lnd.rest_port', rest_port.text), root.set_and_save('lnd.grpc_port', grpc_port.text))
                        size_hint_x: None
                        width: dp(100)
                        height: dp(40)
                        md_bg_color: 0.3,0.3,0.3,1
                MDLabel:
                    text: 'Once saved, you can proceed onto the next tab.'
                    size_hint_y: 0.1
        Tab:
            title: 'TLS Certificate'
            BoxLayout:
                orientation: 'vertical'
                size_hint: (1, 1)
                MDLabel:
                    text: "Install the 'rsa' module on your node, with pip3 install rsa then copy and run the provided command on your node."
                    size_hint_y: None
                    height: self.texture_size[1]
                    multiline: True
                MDIconButton:
                    icon: "content-copy"
                    on_release: root.copy_cert_encrypt_command()
                TextInput:
                    id: tls_cert
                    text: root.get_cert()
                    on_text: root.validate_cert(self.text)
                    multiline: True
                MDLabel:
                    id: feedback
                    text: ""
                    multiline: True
                    size_hint_y: None
                    height: self.texture_size[1]
                MDRaisedButton:
                    text: 'Save'
                    on_release: root.save_cert(tls_cert.text)
                    size_hint: (None, None)
                    width: dp(100)
                    height: dp(40)
                    md_bg_color: 0.3,0.3,0.3,1
                MDLabel:
                    text: 'Once saved, you can proceed onto the next tab.'
                    size_hint_y: None
                    height: self.texture_size[1]
        Tab:
            title: 'Macaroon'
            BoxLayout:
                orientation: 'vertical'
                size_hint: (1, 1)
                MDLabel:
                    text: "Install the 'rsa' module on your node (if you haven't already) with pip3 install rsa then copy and run the provided command on your node."
                    multiline: True
                    size_hint_y: None
                    height: self.texture_size[1]
                MDIconButton:
                    icon: "content-copy"
                    on_release: root.copy_mac_encrypt_command()
                TextInput:
                    id: macaroon
                    text: root.get_macaroon()
                    helper_text: 'Macaroon'
                    helper_text_mode: "persistent"
                    on_text: root.validate_macaroon(self.text)
                    multiline: True
                MDLabel:
                    id: mac_feedback
                    text: ""
                    size_hint_y: None
                    height: self.texture_size[1]
                    multiline: True
                MDRaisedButton:
                    text: 'Save'
                    on_release: root.save_macaroon(macaroon.text)
                    size_hint: (None, None)
                    width: dp(100)
                    height: dp(40)
                    md_bg_color: 0.3,0.3,0.3,1

